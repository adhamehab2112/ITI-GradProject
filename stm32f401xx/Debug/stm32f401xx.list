
stm32f401xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e20  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000fb4  08000fb4  00010fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fc4  08000fc4  00010fcc  2**0
                  CONTENTS
  4 .ARM          00000000  08000fc4  08000fc4  00010fcc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fc4  08000fcc  00010fcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fc4  08000fc4  00010fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fc8  08000fc8  00010fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000fcc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000fcc  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010fcc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001415  00000000  00000000  00010ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000666  00000000  00000000  00012411  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000208  00000000  00000000  00012a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000190  00000000  00000000  00012c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001440  00000000  00000000  00012e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000d10  00000000  00000000  00014250  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000050d6  00000000  00000000  00014f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001a036  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f0  00000000  00000000  0001a0b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000f9c 	.word	0x08000f9c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000f9c 	.word	0x08000f9c

080001d4 <HAL_KEYPAD_Init>:
 *  Created on: Jul 7, 2023
 *      Author: adham
 */
#include"KEYPAD.h"
void HAL_KEYPAD_Init()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	GPIOx_Config_t keypad_config ;
	keypad_config.GPIO_PIN_NUMBER = ROW0 ;
 80001da:	2300      	movs	r3, #0
 80001dc:	713b      	strb	r3, [r7, #4]
	keypad_config.GPIO_PIN_MODE = GPIO_OUT_PP ;
 80001de:	2304      	movs	r3, #4
 80001e0:	717b      	strb	r3, [r7, #5]
	keypad_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH;
 80001e2:	2302      	movs	r3, #2
 80001e4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIOx_Init(KEYPAD_PORT, &keypad_config);
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	4619      	mov	r1, r3
 80001ea:	482a      	ldr	r0, [pc, #168]	; (8000294 <HAL_KEYPAD_Init+0xc0>)
 80001ec:	f000 faae 	bl	800074c <MCAL_GPIOx_Init>

	keypad_config.GPIO_PIN_NUMBER = ROW1 ;
 80001f0:	2301      	movs	r3, #1
 80001f2:	713b      	strb	r3, [r7, #4]
	keypad_config.GPIO_PIN_MODE = GPIO_OUT_PP ;
 80001f4:	2304      	movs	r3, #4
 80001f6:	717b      	strb	r3, [r7, #5]
	keypad_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH	;
 80001f8:	2302      	movs	r3, #2
 80001fa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIOx_Init(KEYPAD_PORT, &keypad_config);
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	4619      	mov	r1, r3
 8000200:	4824      	ldr	r0, [pc, #144]	; (8000294 <HAL_KEYPAD_Init+0xc0>)
 8000202:	f000 faa3 	bl	800074c <MCAL_GPIOx_Init>

	keypad_config.GPIO_PIN_NUMBER = ROW2 ;
 8000206:	2302      	movs	r3, #2
 8000208:	713b      	strb	r3, [r7, #4]
	keypad_config.GPIO_PIN_MODE = GPIO_OUT_PP ;
 800020a:	2304      	movs	r3, #4
 800020c:	717b      	strb	r3, [r7, #5]
	keypad_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH;
 800020e:	2302      	movs	r3, #2
 8000210:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIOx_Init(KEYPAD_PORT, &keypad_config);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4619      	mov	r1, r3
 8000216:	481f      	ldr	r0, [pc, #124]	; (8000294 <HAL_KEYPAD_Init+0xc0>)
 8000218:	f000 fa98 	bl	800074c <MCAL_GPIOx_Init>

	keypad_config.GPIO_PIN_NUMBER = ROW3 ;
 800021c:	2303      	movs	r3, #3
 800021e:	713b      	strb	r3, [r7, #4]
	keypad_config.GPIO_PIN_MODE = GPIO_OUT_PP ;
 8000220:	2304      	movs	r3, #4
 8000222:	717b      	strb	r3, [r7, #5]
	keypad_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH;
 8000224:	2302      	movs	r3, #2
 8000226:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIOx_Init(KEYPAD_PORT, &keypad_config);
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	4619      	mov	r1, r3
 800022c:	4819      	ldr	r0, [pc, #100]	; (8000294 <HAL_KEYPAD_Init+0xc0>)
 800022e:	f000 fa8d 	bl	800074c <MCAL_GPIOx_Init>

	keypad_config.GPIO_PIN_NUMBER = COL0 ;
 8000232:	2304      	movs	r3, #4
 8000234:	713b      	strb	r3, [r7, #4]
	keypad_config.GPIO_PIN_MODE = GPIO_OUT_PP ;
 8000236:	2304      	movs	r3, #4
 8000238:	717b      	strb	r3, [r7, #5]
	keypad_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH	 ;
 800023a:	2302      	movs	r3, #2
 800023c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIOx_Init(KEYPAD_PORT, &keypad_config);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4619      	mov	r1, r3
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <HAL_KEYPAD_Init+0xc0>)
 8000244:	f000 fa82 	bl	800074c <MCAL_GPIOx_Init>

	keypad_config.GPIO_PIN_NUMBER = COL1 ;
 8000248:	2305      	movs	r3, #5
 800024a:	713b      	strb	r3, [r7, #4]
	keypad_config.GPIO_PIN_MODE = GPIO_OUT_PP ;
 800024c:	2304      	movs	r3, #4
 800024e:	717b      	strb	r3, [r7, #5]
	keypad_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH	 ;
 8000250:	2302      	movs	r3, #2
 8000252:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIOx_Init(KEYPAD_PORT, &keypad_config);
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	4619      	mov	r1, r3
 8000258:	480e      	ldr	r0, [pc, #56]	; (8000294 <HAL_KEYPAD_Init+0xc0>)
 800025a:	f000 fa77 	bl	800074c <MCAL_GPIOx_Init>

	keypad_config.GPIO_PIN_NUMBER = COL2 ;
 800025e:	2306      	movs	r3, #6
 8000260:	713b      	strb	r3, [r7, #4]
	keypad_config.GPIO_PIN_MODE = GPIO_OUT_PP ;
 8000262:	2304      	movs	r3, #4
 8000264:	717b      	strb	r3, [r7, #5]
	keypad_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH	 ;
 8000266:	2302      	movs	r3, #2
 8000268:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIOx_Init(KEYPAD_PORT, &keypad_config);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4619      	mov	r1, r3
 800026e:	4809      	ldr	r0, [pc, #36]	; (8000294 <HAL_KEYPAD_Init+0xc0>)
 8000270:	f000 fa6c 	bl	800074c <MCAL_GPIOx_Init>

	keypad_config.GPIO_PIN_NUMBER = COL3 ;
 8000274:	2307      	movs	r3, #7
 8000276:	713b      	strb	r3, [r7, #4]
	keypad_config.GPIO_PIN_MODE = GPIO_OUT_PP ;
 8000278:	2304      	movs	r3, #4
 800027a:	717b      	strb	r3, [r7, #5]
	keypad_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH	 ;
 800027c:	2302      	movs	r3, #2
 800027e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIOx_Init(KEYPAD_PORT, &keypad_config);
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	4619      	mov	r1, r3
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <HAL_KEYPAD_Init+0xc0>)
 8000286:	f000 fa61 	bl	800074c <MCAL_GPIOx_Init>
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40020400 	.word	0x40020400

08000298 <HAL_KEYPAD_Get_PressedKey>:

uint8_t HAL_KEYPAD_Get_PressedKey()
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b087      	sub	sp, #28
 800029c:	af00      	add	r7, sp, #0
	MCAL_GPIOx_Pin_Write(KEYPAD_PORT, COL0, PIN_HIGH);
 800029e:	2201      	movs	r2, #1
 80002a0:	2104      	movs	r1, #4
 80002a2:	482c      	ldr	r0, [pc, #176]	; (8000354 <HAL_KEYPAD_Get_PressedKey+0xbc>)
 80002a4:	f000 fc68 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(KEYPAD_PORT, COL1, PIN_HIGH);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2105      	movs	r1, #5
 80002ac:	4829      	ldr	r0, [pc, #164]	; (8000354 <HAL_KEYPAD_Get_PressedKey+0xbc>)
 80002ae:	f000 fc63 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(KEYPAD_PORT, COL2, PIN_HIGH);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2106      	movs	r1, #6
 80002b6:	4827      	ldr	r0, [pc, #156]	; (8000354 <HAL_KEYPAD_Get_PressedKey+0xbc>)
 80002b8:	f000 fc5e 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(KEYPAD_PORT, COL3, PIN_HIGH);
 80002bc:	2201      	movs	r2, #1
 80002be:	2107      	movs	r1, #7
 80002c0:	4824      	ldr	r0, [pc, #144]	; (8000354 <HAL_KEYPAD_Get_PressedKey+0xbc>)
 80002c2:	f000 fc59 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	uint8_t pressedKey = NO_PRESSED_KEY	;
 80002c6:	23ff      	movs	r3, #255	; 0xff
 80002c8:	757b      	strb	r3, [r7, #21]
	uint8_t row_itr , col_itr ;
	uint8_t keypadButtomns[ROW_NUM][COL_NUM] = KEYPAD_ARR_VALUES ;
 80002ca:	4b23      	ldr	r3, [pc, #140]	; (8000358 <HAL_KEYPAD_Get_PressedKey+0xc0>)
 80002cc:	1d3c      	adds	r4, r7, #4
 80002ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(col_itr = COL_OFFSET ; col_itr < (COL_OFFSET+COL_NUM) ; col_itr++)
 80002d4:	2304      	movs	r3, #4
 80002d6:	75bb      	strb	r3, [r7, #22]
 80002d8:	e033      	b.n	8000342 <HAL_KEYPAD_Get_PressedKey+0xaa>
	{
		MCAL_GPIOx_Pin_Write(KEYPAD_PORT, col_itr, PIN_LOW	);
 80002da:	7dbb      	ldrb	r3, [r7, #22]
 80002dc:	2200      	movs	r2, #0
 80002de:	4619      	mov	r1, r3
 80002e0:	481c      	ldr	r0, [pc, #112]	; (8000354 <HAL_KEYPAD_Get_PressedKey+0xbc>)
 80002e2:	f000 fc49 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
		for(row_itr=ROW_OFFSET ; row_itr < (ROW_OFFSET+ROW_NUM) ; row_itr++ )
 80002e6:	2300      	movs	r3, #0
 80002e8:	75fb      	strb	r3, [r7, #23]
 80002ea:	e01e      	b.n	800032a <HAL_KEYPAD_Get_PressedKey+0x92>
		{
			if(MCAL_GPIOx_Pin_Read(KEYPAD_PORT, row_itr) == PIN_LOW	)
 80002ec:	7dfb      	ldrb	r3, [r7, #23]
 80002ee:	4619      	mov	r1, r3
 80002f0:	4818      	ldr	r0, [pc, #96]	; (8000354 <HAL_KEYPAD_Get_PressedKey+0xbc>)
 80002f2:	f000 fc69 	bl	8000bc8 <MCAL_GPIOx_Pin_Read>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d113      	bne.n	8000324 <HAL_KEYPAD_Get_PressedKey+0x8c>
			{
				while(MCAL_GPIOx_Pin_Read(KEYPAD_PORT, row_itr) == PIN_LOW	); // wait until key release
 80002fc:	bf00      	nop
 80002fe:	7dfb      	ldrb	r3, [r7, #23]
 8000300:	4619      	mov	r1, r3
 8000302:	4814      	ldr	r0, [pc, #80]	; (8000354 <HAL_KEYPAD_Get_PressedKey+0xbc>)
 8000304:	f000 fc60 	bl	8000bc8 <MCAL_GPIOx_Pin_Read>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d0f7      	beq.n	80002fe <HAL_KEYPAD_Get_PressedKey+0x66>
				return keypadButtomns[row_itr-ROW_OFFSET][col_itr-COL_OFFSET];
 800030e:	7dfa      	ldrb	r2, [r7, #23]
 8000310:	7dbb      	ldrb	r3, [r7, #22]
 8000312:	3b04      	subs	r3, #4
 8000314:	0092      	lsls	r2, r2, #2
 8000316:	f107 0118 	add.w	r1, r7, #24
 800031a:	440a      	add	r2, r1
 800031c:	4413      	add	r3, r2
 800031e:	3b14      	subs	r3, #20
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	e012      	b.n	800034a <HAL_KEYPAD_Get_PressedKey+0xb2>
		for(row_itr=ROW_OFFSET ; row_itr < (ROW_OFFSET+ROW_NUM) ; row_itr++ )
 8000324:	7dfb      	ldrb	r3, [r7, #23]
 8000326:	3301      	adds	r3, #1
 8000328:	75fb      	strb	r3, [r7, #23]
 800032a:	7dfb      	ldrb	r3, [r7, #23]
 800032c:	2b03      	cmp	r3, #3
 800032e:	d9dd      	bls.n	80002ec <HAL_KEYPAD_Get_PressedKey+0x54>
			}

		}
		MCAL_GPIOx_Pin_Write(KEYPAD_PORT, col_itr, PIN_HIGH);
 8000330:	7dbb      	ldrb	r3, [r7, #22]
 8000332:	2201      	movs	r2, #1
 8000334:	4619      	mov	r1, r3
 8000336:	4807      	ldr	r0, [pc, #28]	; (8000354 <HAL_KEYPAD_Get_PressedKey+0xbc>)
 8000338:	f000 fc1e 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	for(col_itr = COL_OFFSET ; col_itr < (COL_OFFSET+COL_NUM) ; col_itr++)
 800033c:	7dbb      	ldrb	r3, [r7, #22]
 800033e:	3301      	adds	r3, #1
 8000340:	75bb      	strb	r3, [r7, #22]
 8000342:	7dbb      	ldrb	r3, [r7, #22]
 8000344:	2b07      	cmp	r3, #7
 8000346:	d9c8      	bls.n	80002da <HAL_KEYPAD_Get_PressedKey+0x42>
	}
	return pressedKey ;
 8000348:	7d7b      	ldrb	r3, [r7, #21]
}
 800034a:	4618      	mov	r0, r3
 800034c:	371c      	adds	r7, #28
 800034e:	46bd      	mov	sp, r7
 8000350:	bd90      	pop	{r4, r7, pc}
 8000352:	bf00      	nop
 8000354:	40020400 	.word	0x40020400
 8000358:	08000fb4 	.word	0x08000fb4

0800035c <wait_ms>:
 */
#include"LCD.h"
#include"../../MCAL/GPIO/GPIO_Interface.h"

void wait_ms(uint32_t time)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	uint32_t i , j;

	for( i=0 ; i<time ; i++)
 8000364:	2300      	movs	r3, #0
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	e00b      	b.n	8000382 <wait_ms+0x26>
		for(j=0 ; j<255 ; j++);
 800036a:	2300      	movs	r3, #0
 800036c:	60bb      	str	r3, [r7, #8]
 800036e:	e002      	b.n	8000376 <wait_ms+0x1a>
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	3301      	adds	r3, #1
 8000374:	60bb      	str	r3, [r7, #8]
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	2bfe      	cmp	r3, #254	; 0xfe
 800037a:	d9f9      	bls.n	8000370 <wait_ms+0x14>
	for( i=0 ; i<time ; i++)
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	3301      	adds	r3, #1
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	429a      	cmp	r2, r3
 8000388:	d3ef      	bcc.n	800036a <wait_ms+0xe>
}
 800038a:	bf00      	nop
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
	...

08000398 <Private_LCD_Pins_init>:
void Private_LCD_Pins_init()
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
	// RS init
	GPIOx_Config_t lcd_config ;
	lcd_config.GPIO_PIN_MODE = GPIO_OUT_PP	;
 800039e:	2304      	movs	r3, #4
 80003a0:	717b      	strb	r3, [r7, #5]
	lcd_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH ;
 80003a2:	2302      	movs	r3, #2
 80003a4:	71fb      	strb	r3, [r7, #7]
	lcd_config.GPIO_PIN_NUMBER = LCD_COMM_RS ;
 80003a6:	2308      	movs	r3, #8
 80003a8:	713b      	strb	r3, [r7, #4]
	MCAL_GPIOx_Init(LCD_COMM_PORT, &lcd_config);
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4619      	mov	r1, r3
 80003ae:	4842      	ldr	r0, [pc, #264]	; (80004b8 <Private_LCD_Pins_init+0x120>)
 80003b0:	f000 f9cc 	bl	800074c <MCAL_GPIOx_Init>

	//RW init
	lcd_config.GPIO_PIN_MODE = GPIO_OUT_PP	;
 80003b4:	2304      	movs	r3, #4
 80003b6:	717b      	strb	r3, [r7, #5]
	lcd_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH ;
 80003b8:	2302      	movs	r3, #2
 80003ba:	71fb      	strb	r3, [r7, #7]
	lcd_config.GPIO_PIN_NUMBER = LCD_COMM_RW ;
 80003bc:	2309      	movs	r3, #9
 80003be:	713b      	strb	r3, [r7, #4]
	MCAL_GPIOx_Init(LCD_COMM_PORT, &lcd_config);
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	4619      	mov	r1, r3
 80003c4:	483c      	ldr	r0, [pc, #240]	; (80004b8 <Private_LCD_Pins_init+0x120>)
 80003c6:	f000 f9c1 	bl	800074c <MCAL_GPIOx_Init>
	//EN init
	lcd_config.GPIO_PIN_MODE = GPIO_OUT_PP	;
 80003ca:	2304      	movs	r3, #4
 80003cc:	717b      	strb	r3, [r7, #5]
	lcd_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH ;
 80003ce:	2302      	movs	r3, #2
 80003d0:	71fb      	strb	r3, [r7, #7]
	lcd_config.GPIO_PIN_NUMBER = LCD_COMM_EN ;
 80003d2:	230a      	movs	r3, #10
 80003d4:	713b      	strb	r3, [r7, #4]
	MCAL_GPIOx_Init(LCD_COMM_PORT, &lcd_config);
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	4619      	mov	r1, r3
 80003da:	4837      	ldr	r0, [pc, #220]	; (80004b8 <Private_LCD_Pins_init+0x120>)
 80003dc:	f000 f9b6 	bl	800074c <MCAL_GPIOx_Init>
	lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D7 ;
	MCAL_GPIOx_Init(LCD_DATA_PORT, &lcd_config);
#elif(LCD_DATA_BITS_MODE == 8)
	//DATA init
		//D0
		lcd_config.GPIO_PIN_MODE = GPIO_OUT_PP	;
 80003e0:	2304      	movs	r3, #4
 80003e2:	717b      	strb	r3, [r7, #5]
		lcd_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH ;
 80003e4:	2302      	movs	r3, #2
 80003e6:	71fb      	strb	r3, [r7, #7]
		lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D0 ;
 80003e8:	2300      	movs	r3, #0
 80003ea:	713b      	strb	r3, [r7, #4]
		MCAL_GPIOx_Init(LCD_DATA_PORT, &lcd_config);
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	4619      	mov	r1, r3
 80003f0:	4831      	ldr	r0, [pc, #196]	; (80004b8 <Private_LCD_Pins_init+0x120>)
 80003f2:	f000 f9ab 	bl	800074c <MCAL_GPIOx_Init>
		//D1
		lcd_config.GPIO_PIN_MODE = GPIO_OUT_PP	;
 80003f6:	2304      	movs	r3, #4
 80003f8:	717b      	strb	r3, [r7, #5]
		lcd_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH ;
 80003fa:	2302      	movs	r3, #2
 80003fc:	71fb      	strb	r3, [r7, #7]
		lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D1 ;
 80003fe:	2301      	movs	r3, #1
 8000400:	713b      	strb	r3, [r7, #4]
		MCAL_GPIOx_Init(LCD_DATA_PORT, &lcd_config);
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	4619      	mov	r1, r3
 8000406:	482c      	ldr	r0, [pc, #176]	; (80004b8 <Private_LCD_Pins_init+0x120>)
 8000408:	f000 f9a0 	bl	800074c <MCAL_GPIOx_Init>
		//D2
		lcd_config.GPIO_PIN_MODE = GPIO_OUT_PP	;
 800040c:	2304      	movs	r3, #4
 800040e:	717b      	strb	r3, [r7, #5]
		lcd_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH ;
 8000410:	2302      	movs	r3, #2
 8000412:	71fb      	strb	r3, [r7, #7]
		lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D2 ;
 8000414:	2302      	movs	r3, #2
 8000416:	713b      	strb	r3, [r7, #4]
		MCAL_GPIOx_Init(LCD_DATA_PORT, &lcd_config);
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	4619      	mov	r1, r3
 800041c:	4826      	ldr	r0, [pc, #152]	; (80004b8 <Private_LCD_Pins_init+0x120>)
 800041e:	f000 f995 	bl	800074c <MCAL_GPIOx_Init>
		//D3
		lcd_config.GPIO_PIN_MODE = GPIO_OUT_PP	;
 8000422:	2304      	movs	r3, #4
 8000424:	717b      	strb	r3, [r7, #5]
		lcd_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH ;
 8000426:	2302      	movs	r3, #2
 8000428:	71fb      	strb	r3, [r7, #7]
		lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D3 ;
 800042a:	2303      	movs	r3, #3
 800042c:	713b      	strb	r3, [r7, #4]
		MCAL_GPIOx_Init(LCD_DATA_PORT, &lcd_config);
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	4619      	mov	r1, r3
 8000432:	4821      	ldr	r0, [pc, #132]	; (80004b8 <Private_LCD_Pins_init+0x120>)
 8000434:	f000 f98a 	bl	800074c <MCAL_GPIOx_Init>
		//D4
		lcd_config.GPIO_PIN_MODE = GPIO_OUT_PP	;
 8000438:	2304      	movs	r3, #4
 800043a:	717b      	strb	r3, [r7, #5]
		lcd_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH ;
 800043c:	2302      	movs	r3, #2
 800043e:	71fb      	strb	r3, [r7, #7]
		lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D4 ;
 8000440:	2304      	movs	r3, #4
 8000442:	713b      	strb	r3, [r7, #4]
		MCAL_GPIOx_Init(LCD_DATA_PORT, &lcd_config);
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	4619      	mov	r1, r3
 8000448:	481b      	ldr	r0, [pc, #108]	; (80004b8 <Private_LCD_Pins_init+0x120>)
 800044a:	f000 f97f 	bl	800074c <MCAL_GPIOx_Init>
		//D5
		lcd_config.GPIO_PIN_MODE = GPIO_OUT_PP	;
 800044e:	2304      	movs	r3, #4
 8000450:	717b      	strb	r3, [r7, #5]
		lcd_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH ;
 8000452:	2302      	movs	r3, #2
 8000454:	71fb      	strb	r3, [r7, #7]
		lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D5 ;
 8000456:	2305      	movs	r3, #5
 8000458:	713b      	strb	r3, [r7, #4]
		MCAL_GPIOx_Init(LCD_DATA_PORT, &lcd_config);
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	4619      	mov	r1, r3
 800045e:	4816      	ldr	r0, [pc, #88]	; (80004b8 <Private_LCD_Pins_init+0x120>)
 8000460:	f000 f974 	bl	800074c <MCAL_GPIOx_Init>
		//D6
		lcd_config.GPIO_PIN_MODE = GPIO_OUT_PP	;
 8000464:	2304      	movs	r3, #4
 8000466:	717b      	strb	r3, [r7, #5]
		lcd_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH ;
 8000468:	2302      	movs	r3, #2
 800046a:	71fb      	strb	r3, [r7, #7]
		lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D6 ;
 800046c:	2306      	movs	r3, #6
 800046e:	713b      	strb	r3, [r7, #4]
		MCAL_GPIOx_Init(LCD_DATA_PORT, &lcd_config);
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	4619      	mov	r1, r3
 8000474:	4810      	ldr	r0, [pc, #64]	; (80004b8 <Private_LCD_Pins_init+0x120>)
 8000476:	f000 f969 	bl	800074c <MCAL_GPIOx_Init>
		//D7
		lcd_config.GPIO_PIN_MODE = GPIO_OUT_PP	;
 800047a:	2304      	movs	r3, #4
 800047c:	717b      	strb	r3, [r7, #5]
		lcd_config.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_HIGH ;
 800047e:	2302      	movs	r3, #2
 8000480:	71fb      	strb	r3, [r7, #7]
		lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D7 ;
 8000482:	2307      	movs	r3, #7
 8000484:	713b      	strb	r3, [r7, #4]
		MCAL_GPIOx_Init(LCD_DATA_PORT, &lcd_config);
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	4619      	mov	r1, r3
 800048a:	480b      	ldr	r0, [pc, #44]	; (80004b8 <Private_LCD_Pins_init+0x120>)
 800048c:	f000 f95e 	bl	800074c <MCAL_GPIOx_Init>

#endif
	MCAL_GPIOx_Pin_Write(LCD_COMM_PORT, LCD_COMM_EN, PIN_LOW	);
 8000490:	2200      	movs	r2, #0
 8000492:	210a      	movs	r1, #10
 8000494:	4808      	ldr	r0, [pc, #32]	; (80004b8 <Private_LCD_Pins_init+0x120>)
 8000496:	f000 fb6f 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_COMM_PORT, LCD_COMM_RS, PIN_LOW	);
 800049a:	2200      	movs	r2, #0
 800049c:	2108      	movs	r1, #8
 800049e:	4806      	ldr	r0, [pc, #24]	; (80004b8 <Private_LCD_Pins_init+0x120>)
 80004a0:	f000 fb6a 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_COMM_PORT, LCD_COMM_RW, PIN_LOW	);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2109      	movs	r1, #9
 80004a8:	4803      	ldr	r0, [pc, #12]	; (80004b8 <Private_LCD_Pins_init+0x120>)
 80004aa:	f000 fb65 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40020000 	.word	0x40020000

080004bc <Private_LCD_Kick>:
void Private_LCD_Kick()
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	MCAL_GPIOx_Pin_Write(LCD_COMM_PORT, LCD_COMM_EN, PIN_HIGH);
 80004c0:	2201      	movs	r2, #1
 80004c2:	210a      	movs	r1, #10
 80004c4:	4806      	ldr	r0, [pc, #24]	; (80004e0 <Private_LCD_Kick+0x24>)
 80004c6:	f000 fb57 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	wait_ms(50);
 80004ca:	2032      	movs	r0, #50	; 0x32
 80004cc:	f7ff ff46 	bl	800035c <wait_ms>
	MCAL_GPIOx_Pin_Write(LCD_COMM_PORT, LCD_COMM_EN, PIN_LOW	);
 80004d0:	2200      	movs	r2, #0
 80004d2:	210a      	movs	r1, #10
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <Private_LCD_Kick+0x24>)
 80004d6:	f000 fb4f 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40020000 	.word	0x40020000

080004e4 <HAL_LCD_Init>:
void HAL_LCD_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	wait_ms(20);
 80004e8:	2014      	movs	r0, #20
 80004ea:	f7ff ff37 	bl	800035c <wait_ms>
	Private_LCD_Pins_init();
 80004ee:	f7ff ff53 	bl	8000398 <Private_LCD_Pins_init>
	wait_ms(15);
 80004f2:	200f      	movs	r0, #15
 80004f4:	f7ff ff32 	bl	800035c <wait_ms>
	HAL_LCD_Clear_Screen();
 80004f8:	f000 f8ea 	bl	80006d0 <HAL_LCD_Clear_Screen>
	#if(LCD_DATA_BITS_MODE == 8)
	HAL_LCD_Send_Command(LCD_8BIT_MODE_SELECT);
 80004fc:	2038      	movs	r0, #56	; 0x38
 80004fe:	f000 f80b 	bl	8000518 <HAL_LCD_Send_Command>
	#elif(LCD_DATA_BITS_MODE == 4)
	HAL_LCD_Send_Command(LCD_4BIT_MODE_SELECT_1);
	HAL_LCD_Send_Command(LCD_4BIT_MODE_SELECT_2);
	HAL_LCD_Send_Command(0x28);
	#endif
	HAL_LCD_Send_Command(LCD_ENTERY_MODE);
 8000502:	2006      	movs	r0, #6
 8000504:	f000 f808 	bl	8000518 <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(LCD_BEGIN_AT_FIRIST_ROW);
 8000508:	2080      	movs	r0, #128	; 0x80
 800050a:	f000 f805 	bl	8000518 <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(LCDC_DISPLAY_CURSOR_ON_BLINK);
 800050e:	200f      	movs	r0, #15
 8000510:	f000 f802 	bl	8000518 <HAL_LCD_Send_Command>


}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}

08000518 <HAL_LCD_Send_Command>:
void HAL_LCD_Send_Command(uint8_t comm)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIOx_Pin_Write(LCD_COMM_PORT, LCD_COMM_RW, PIN_LOW	);
 8000522:	2200      	movs	r2, #0
 8000524:	2109      	movs	r1, #9
 8000526:	4832      	ldr	r0, [pc, #200]	; (80005f0 <HAL_LCD_Send_Command+0xd8>)
 8000528:	f000 fb26 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_COMM_PORT, LCD_COMM_RS, PIN_LOW	);
 800052c:	2200      	movs	r2, #0
 800052e:	2108      	movs	r1, #8
 8000530:	482f      	ldr	r0, [pc, #188]	; (80005f0 <HAL_LCD_Send_Command+0xd8>)
 8000532:	f000 fb21 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	#if(LCD_DATA_BITS_MODE == 8)
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D0,GET_BIT(comm,0));
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	b2db      	uxtb	r3, r3
 800053e:	461a      	mov	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	482b      	ldr	r0, [pc, #172]	; (80005f0 <HAL_LCD_Send_Command+0xd8>)
 8000544:	f000 fb18 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D1,GET_BIT(comm,1));
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	105b      	asrs	r3, r3, #1
 800054c:	b2db      	uxtb	r3, r3
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	b2db      	uxtb	r3, r3
 8000554:	461a      	mov	r2, r3
 8000556:	2101      	movs	r1, #1
 8000558:	4825      	ldr	r0, [pc, #148]	; (80005f0 <HAL_LCD_Send_Command+0xd8>)
 800055a:	f000 fb0d 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D2,GET_BIT(comm,2));
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	109b      	asrs	r3, r3, #2
 8000562:	b2db      	uxtb	r3, r3
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	2102      	movs	r1, #2
 800056e:	4820      	ldr	r0, [pc, #128]	; (80005f0 <HAL_LCD_Send_Command+0xd8>)
 8000570:	f000 fb02 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D3,GET_BIT(comm,3));
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	10db      	asrs	r3, r3, #3
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	b2db      	uxtb	r3, r3
 8000580:	461a      	mov	r2, r3
 8000582:	2103      	movs	r1, #3
 8000584:	481a      	ldr	r0, [pc, #104]	; (80005f0 <HAL_LCD_Send_Command+0xd8>)
 8000586:	f000 faf7 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D4,GET_BIT(comm,4));
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	111b      	asrs	r3, r3, #4
 800058e:	b2db      	uxtb	r3, r3
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	b2db      	uxtb	r3, r3
 8000596:	461a      	mov	r2, r3
 8000598:	2104      	movs	r1, #4
 800059a:	4815      	ldr	r0, [pc, #84]	; (80005f0 <HAL_LCD_Send_Command+0xd8>)
 800059c:	f000 faec 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D5,GET_BIT(comm,5));
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	115b      	asrs	r3, r3, #5
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	2105      	movs	r1, #5
 80005b0:	480f      	ldr	r0, [pc, #60]	; (80005f0 <HAL_LCD_Send_Command+0xd8>)
 80005b2:	f000 fae1 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D6,GET_BIT(comm,6));
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	119b      	asrs	r3, r3, #6
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	461a      	mov	r2, r3
 80005c4:	2106      	movs	r1, #6
 80005c6:	480a      	ldr	r0, [pc, #40]	; (80005f0 <HAL_LCD_Send_Command+0xd8>)
 80005c8:	f000 fad6 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D7,GET_BIT(comm,7));
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	09db      	lsrs	r3, r3, #7
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	461a      	mov	r2, r3
 80005d4:	2107      	movs	r1, #7
 80005d6:	4806      	ldr	r0, [pc, #24]	; (80005f0 <HAL_LCD_Send_Command+0xd8>)
 80005d8:	f000 face 	bl	8000b78 <MCAL_GPIOx_Pin_Write>

	wait_ms(1);
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff febd 	bl	800035c <wait_ms>
	Private_LCD_Kick();
 80005e2:	f7ff ff6b 	bl	80004bc <Private_LCD_Kick>
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D2,GET_BIT(comm,2));
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D3,GET_BIT(comm,3));
	wait_ms(1)
	Private_LCD_Kick();
	#endif
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40020000 	.word	0x40020000

080005f4 <HAL_LCD_Display_Char>:
void HAL_LCD_Display_Char(uint8_t data)
{	MCAL_GPIOx_Pin_Write(LCD_COMM_PORT, LCD_COMM_RW, PIN_LOW);
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
 80005fe:	2200      	movs	r2, #0
 8000600:	2109      	movs	r1, #9
 8000602:	4832      	ldr	r0, [pc, #200]	; (80006cc <HAL_LCD_Display_Char+0xd8>)
 8000604:	f000 fab8 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_COMM_PORT, LCD_COMM_RS, PIN_HIGH);
 8000608:	2201      	movs	r2, #1
 800060a:	2108      	movs	r1, #8
 800060c:	482f      	ldr	r0, [pc, #188]	; (80006cc <HAL_LCD_Display_Char+0xd8>)
 800060e:	f000 fab3 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	#if(LCD_DATA_BITS_MODE == 8)
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D0,GET_BIT(data,0));
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	482b      	ldr	r0, [pc, #172]	; (80006cc <HAL_LCD_Display_Char+0xd8>)
 8000620:	f000 faaa 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D1,GET_BIT(data,1));
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	105b      	asrs	r3, r3, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	b2db      	uxtb	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	2101      	movs	r1, #1
 8000634:	4825      	ldr	r0, [pc, #148]	; (80006cc <HAL_LCD_Display_Char+0xd8>)
 8000636:	f000 fa9f 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D2,GET_BIT(data,2));
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	109b      	asrs	r3, r3, #2
 800063e:	b2db      	uxtb	r3, r3
 8000640:	f003 0301 	and.w	r3, r3, #1
 8000644:	b2db      	uxtb	r3, r3
 8000646:	461a      	mov	r2, r3
 8000648:	2102      	movs	r1, #2
 800064a:	4820      	ldr	r0, [pc, #128]	; (80006cc <HAL_LCD_Display_Char+0xd8>)
 800064c:	f000 fa94 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D3,GET_BIT(data,3));
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	10db      	asrs	r3, r3, #3
 8000654:	b2db      	uxtb	r3, r3
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	461a      	mov	r2, r3
 800065e:	2103      	movs	r1, #3
 8000660:	481a      	ldr	r0, [pc, #104]	; (80006cc <HAL_LCD_Display_Char+0xd8>)
 8000662:	f000 fa89 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D4,GET_BIT(data,4));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	111b      	asrs	r3, r3, #4
 800066a:	b2db      	uxtb	r3, r3
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	461a      	mov	r2, r3
 8000674:	2104      	movs	r1, #4
 8000676:	4815      	ldr	r0, [pc, #84]	; (80006cc <HAL_LCD_Display_Char+0xd8>)
 8000678:	f000 fa7e 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D5,GET_BIT(data,5));
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	115b      	asrs	r3, r3, #5
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	2105      	movs	r1, #5
 800068c:	480f      	ldr	r0, [pc, #60]	; (80006cc <HAL_LCD_Display_Char+0xd8>)
 800068e:	f000 fa73 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D6,GET_BIT(data,6));
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	119b      	asrs	r3, r3, #6
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	2106      	movs	r1, #6
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <HAL_LCD_Display_Char+0xd8>)
 80006a4:	f000 fa68 	bl	8000b78 <MCAL_GPIOx_Pin_Write>
	MCAL_GPIOx_Pin_Write(LCD_DATA_PORT,LCD_DATA_D7,GET_BIT(data,7));
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	09db      	lsrs	r3, r3, #7
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	2107      	movs	r1, #7
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <HAL_LCD_Display_Char+0xd8>)
 80006b4:	f000 fa60 	bl	8000b78 <MCAL_GPIOx_Pin_Write>

	wait_ms(1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff fe4f 	bl	800035c <wait_ms>
	Private_LCD_Kick();
 80006be:	f7ff fefd 	bl	80004bc <Private_LCD_Kick>
	Private_LCD_Kick();


	#endif

}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40020000 	.word	0x40020000

080006d0 <HAL_LCD_Clear_Screen>:
void HAL_LCD_Clear_Screen(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_LCD_Send_Command(LCD_CLR_SCREEN);
 80006d4:	2001      	movs	r0, #1
 80006d6:	f7ff ff1f 	bl	8000518 <HAL_LCD_Send_Command>
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}

080006de <HAL_LCD_Display_Number>:
			HAL_LCD_Send_Command(0xC0+col);
		}
	}
}
void HAL_LCD_Display_Number(uint8_t number)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	4603      	mov	r3, r0
 80006e6:	71fb      	strb	r3, [r7, #7]
	HAL_LCD_Display_Char((number+48));
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	3330      	adds	r3, #48	; 0x30
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff80 	bl	80005f4 <HAL_LCD_Display_Char>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <EXTI0_IRQHandler>:
	return STATUS_SUCCESS;

}

void EXTI0_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

	if(ptr[0] != NULL)
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <EXTI0_IRQHandler+0x24>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d008      	beq.n	800071a <EXTI0_IRQHandler+0x1e>
	{
	SET_BIT(EXTI->EXTI_PR,0);
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <EXTI0_IRQHandler+0x28>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	4a05      	ldr	r2, [pc, #20]	; (8000724 <EXTI0_IRQHandler+0x28>)
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	6153      	str	r3, [r2, #20]
	ptr[0]();
 8000714:	4b02      	ldr	r3, [pc, #8]	; (8000720 <EXTI0_IRQHandler+0x24>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4798      	blx	r3
	}
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000001c 	.word	0x2000001c
 8000724:	40013c00 	.word	0x40013c00

08000728 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

	SET_BIT(EXTI->EXTI_PR,1);
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <EXTI1_IRQHandler+0x1c>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <EXTI1_IRQHandler+0x1c>)
 8000732:	f043 0302 	orr.w	r3, r3, #2
 8000736:	6153      	str	r3, [r2, #20]
	ptr[1]();
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <EXTI1_IRQHandler+0x20>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	4798      	blx	r3
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40013c00 	.word	0x40013c00
 8000748:	2000001c 	.word	0x2000001c

0800074c <MCAL_GPIOx_Init>:
 * @param [out] 	: none
 * @retval 		: none
 * Note			: remember that according to our UQFN48 package we only have ports : A-B-C
 *===================================================================*/
void MCAL_GPIOx_Init(GPIOx_Registers_t *GPIOx,GPIOx_Config_t *Config)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
	if(Config->GPIO_PIN_MODE == GPIO_INPUT_PUP || Config->GPIO_PIN_MODE == GPIO_INPUT_PDWN || Config->GPIO_PIN_MODE == GPIO_INPUT_FLOAT )
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	785b      	ldrb	r3, [r3, #1]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d007      	beq.n	800076e <MCAL_GPIOx_Init+0x22>
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	785b      	ldrb	r3, [r3, #1]
 8000762:	2b02      	cmp	r3, #2
 8000764:	d003      	beq.n	800076e <MCAL_GPIOx_Init+0x22>
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	785b      	ldrb	r3, [r3, #1]
 800076a:	2b03      	cmp	r3, #3
 800076c:	d154      	bne.n	8000818 <MCAL_GPIOx_Init+0xcc>
	{
		GPIOx->GPIOx_MODER &= ~( 3<<( (Config->GPIO_PIN_NUMBER)<<1 ) );
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	7812      	ldrb	r2, [r2, #0]
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	2103      	movs	r1, #3
 800077a:	fa01 f202 	lsl.w	r2, r1, r2
 800077e:	43d2      	mvns	r2, r2
 8000780:	401a      	ands	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	601a      	str	r2, [r3, #0]
		switch(Config->GPIO_PIN_MODE)
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	785b      	ldrb	r3, [r3, #1]
 800078a:	2b02      	cmp	r3, #2
 800078c:	d02a      	beq.n	80007e4 <MCAL_GPIOx_Init+0x98>
 800078e:	2b03      	cmp	r3, #3
 8000790:	d002      	beq.n	8000798 <MCAL_GPIOx_Init+0x4c>
 8000792:	2b01      	cmp	r3, #1
 8000794:	d00d      	beq.n	80007b2 <MCAL_GPIOx_Init+0x66>
		case GPIO_INPUT_PDWN :
			CLR_BIT(GPIOx->GPIOx_PUPDR,( (Config->GPIO_PIN_NUMBER)<<1) );
			SET_BIT(GPIOx->GPIOx_PUPDR,( ( (Config->GPIO_PIN_NUMBER) <<1 )+1) );

		}
	}
 8000796:	e1e8      	b.n	8000b6a <MCAL_GPIOx_Init+0x41e>
			GPIOx->GPIOx_PUPDR &= ~( 3<< ( (Config->GPIO_PIN_NUMBER)<<1 ) );
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	7812      	ldrb	r2, [r2, #0]
 80007a0:	0052      	lsls	r2, r2, #1
 80007a2:	2103      	movs	r1, #3
 80007a4:	fa01 f202 	lsl.w	r2, r1, r2
 80007a8:	43d2      	mvns	r2, r2
 80007aa:	401a      	ands	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	60da      	str	r2, [r3, #12]
			break ;
 80007b0:	e031      	b.n	8000816 <MCAL_GPIOx_Init+0xca>
			SET_BIT(GPIOx->GPIOx_PUPDR,(  (Config->GPIO_PIN_NUMBER) <<1 ) );
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	7812      	ldrb	r2, [r2, #0]
 80007ba:	0052      	lsls	r2, r2, #1
 80007bc:	2101      	movs	r1, #1
 80007be:	fa01 f202 	lsl.w	r2, r1, r2
 80007c2:	431a      	orrs	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	60da      	str	r2, [r3, #12]
			CLR_BIT(GPIOx->GPIOx_PUPDR,( ( (Config->GPIO_PIN_NUMBER) <<1 )+1) );
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	7812      	ldrb	r2, [r2, #0]
 80007d0:	0052      	lsls	r2, r2, #1
 80007d2:	3201      	adds	r2, #1
 80007d4:	2101      	movs	r1, #1
 80007d6:	fa01 f202 	lsl.w	r2, r1, r2
 80007da:	43d2      	mvns	r2, r2
 80007dc:	401a      	ands	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	60da      	str	r2, [r3, #12]
			break ;
 80007e2:	e018      	b.n	8000816 <MCAL_GPIOx_Init+0xca>
			CLR_BIT(GPIOx->GPIOx_PUPDR,( (Config->GPIO_PIN_NUMBER)<<1) );
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	7812      	ldrb	r2, [r2, #0]
 80007ec:	0052      	lsls	r2, r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	fa01 f202 	lsl.w	r2, r1, r2
 80007f4:	43d2      	mvns	r2, r2
 80007f6:	401a      	ands	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	60da      	str	r2, [r3, #12]
			SET_BIT(GPIOx->GPIOx_PUPDR,( ( (Config->GPIO_PIN_NUMBER) <<1 )+1) );
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	683a      	ldr	r2, [r7, #0]
 8000802:	7812      	ldrb	r2, [r2, #0]
 8000804:	0052      	lsls	r2, r2, #1
 8000806:	3201      	adds	r2, #1
 8000808:	2101      	movs	r1, #1
 800080a:	fa01 f202 	lsl.w	r2, r1, r2
 800080e:	431a      	orrs	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	60da      	str	r2, [r3, #12]
	}
 8000814:	e1a9      	b.n	8000b6a <MCAL_GPIOx_Init+0x41e>
 8000816:	e1a8      	b.n	8000b6a <MCAL_GPIOx_Init+0x41e>
	else if(Config->GPIO_PIN_MODE == GPIO_OUT_OD || Config->GPIO_PIN_MODE == GPIO_OUT_PP )
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	785b      	ldrb	r3, [r3, #1]
 800081c:	2b05      	cmp	r3, #5
 800081e:	d004      	beq.n	800082a <MCAL_GPIOx_Init+0xde>
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	785b      	ldrb	r3, [r3, #1]
 8000824:	2b04      	cmp	r3, #4
 8000826:	f040 80ac 	bne.w	8000982 <MCAL_GPIOx_Init+0x236>
	{

		SET_BIT(GPIOx->GPIOx_MODER,( (Config->GPIO_PIN_NUMBER)<<1) );
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	683a      	ldr	r2, [r7, #0]
 8000830:	7812      	ldrb	r2, [r2, #0]
 8000832:	0052      	lsls	r2, r2, #1
 8000834:	2101      	movs	r1, #1
 8000836:	fa01 f202 	lsl.w	r2, r1, r2
 800083a:	431a      	orrs	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	601a      	str	r2, [r3, #0]
		CLR_BIT(GPIOx->GPIOx_MODER,( ( (Config->GPIO_PIN_NUMBER) <<1 )+1) );
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	7812      	ldrb	r2, [r2, #0]
 8000848:	0052      	lsls	r2, r2, #1
 800084a:	3201      	adds	r2, #1
 800084c:	2101      	movs	r1, #1
 800084e:	fa01 f202 	lsl.w	r2, r1, r2
 8000852:	43d2      	mvns	r2, r2
 8000854:	401a      	ands	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	601a      	str	r2, [r3, #0]
		switch(Config->GPIO_PIN_MODE)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	785b      	ldrb	r3, [r3, #1]
 800085e:	2b04      	cmp	r3, #4
 8000860:	d002      	beq.n	8000868 <MCAL_GPIOx_Init+0x11c>
 8000862:	2b05      	cmp	r3, #5
 8000864:	d00c      	beq.n	8000880 <MCAL_GPIOx_Init+0x134>
 8000866:	e016      	b.n	8000896 <MCAL_GPIOx_Init+0x14a>
		{
		case GPIO_OUT_PP :
			CLR_BIT(GPIOx->GPIOx_OTYPER,Config->GPIO_PIN_NUMBER);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	683a      	ldr	r2, [r7, #0]
 800086e:	7812      	ldrb	r2, [r2, #0]
 8000870:	4611      	mov	r1, r2
 8000872:	2201      	movs	r2, #1
 8000874:	408a      	lsls	r2, r1
 8000876:	43d2      	mvns	r2, r2
 8000878:	401a      	ands	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	605a      	str	r2, [r3, #4]
			break ;
 800087e:	e00a      	b.n	8000896 <MCAL_GPIOx_Init+0x14a>
		case GPIO_OUT_OD :
			SET_BIT(GPIOx->GPIOx_OTYPER,Config->GPIO_PIN_NUMBER);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	7812      	ldrb	r2, [r2, #0]
 8000888:	4611      	mov	r1, r2
 800088a:	2201      	movs	r2, #1
 800088c:	408a      	lsls	r2, r1
 800088e:	431a      	orrs	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	605a      	str	r2, [r3, #4]
			break ;
 8000894:	bf00      	nop

		}
		switch(Config->GPIO_PIN_OUT_SPEED)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	78db      	ldrb	r3, [r3, #3]
 800089a:	2b03      	cmp	r3, #3
 800089c:	f200 8164 	bhi.w	8000b68 <MCAL_GPIOx_Init+0x41c>
 80008a0:	a201      	add	r2, pc, #4	; (adr r2, 80008a8 <MCAL_GPIOx_Init+0x15c>)
 80008a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a6:	bf00      	nop
 80008a8:	080008b9 	.word	0x080008b9
 80008ac:	080008ed 	.word	0x080008ed
 80008b0:	0800091f 	.word	0x0800091f
 80008b4:	08000951 	.word	0x08000951
		{

		case GPIO_OUT_SPEED_LOW :
			CLR_BIT(GPIOx->GPIOx_OSPEEDR,(Config->GPIO_PIN_NUMBER<<1));
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	7812      	ldrb	r2, [r2, #0]
 80008c0:	0052      	lsls	r2, r2, #1
 80008c2:	2101      	movs	r1, #1
 80008c4:	fa01 f202 	lsl.w	r2, r1, r2
 80008c8:	43d2      	mvns	r2, r2
 80008ca:	401a      	ands	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	609a      	str	r2, [r3, #8]
			CLR_BIT(GPIOx->GPIOx_OSPEEDR,((Config->GPIO_PIN_NUMBER<<1)+1));
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	683a      	ldr	r2, [r7, #0]
 80008d6:	7812      	ldrb	r2, [r2, #0]
 80008d8:	0052      	lsls	r2, r2, #1
 80008da:	3201      	adds	r2, #1
 80008dc:	2101      	movs	r1, #1
 80008de:	fa01 f202 	lsl.w	r2, r1, r2
 80008e2:	43d2      	mvns	r2, r2
 80008e4:	401a      	ands	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	609a      	str	r2, [r3, #8]
			break;
 80008ea:	e049      	b.n	8000980 <MCAL_GPIOx_Init+0x234>
		case GPIO_OUT_SPEED_MEDIUM :
			SET_BIT(GPIOx->GPIOx_OSPEEDR,(Config->GPIO_PIN_NUMBER<<1));
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	683a      	ldr	r2, [r7, #0]
 80008f2:	7812      	ldrb	r2, [r2, #0]
 80008f4:	0052      	lsls	r2, r2, #1
 80008f6:	2101      	movs	r1, #1
 80008f8:	fa01 f202 	lsl.w	r2, r1, r2
 80008fc:	431a      	orrs	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	609a      	str	r2, [r3, #8]
			CLR_BIT(GPIOx->GPIOx_OSPEEDR,((Config->GPIO_PIN_NUMBER<<1)+1));
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	683a      	ldr	r2, [r7, #0]
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	0052      	lsls	r2, r2, #1
 800090c:	3201      	adds	r2, #1
 800090e:	2101      	movs	r1, #1
 8000910:	fa01 f202 	lsl.w	r2, r1, r2
 8000914:	43d2      	mvns	r2, r2
 8000916:	401a      	ands	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	609a      	str	r2, [r3, #8]
			break;
 800091c:	e030      	b.n	8000980 <MCAL_GPIOx_Init+0x234>
		case GPIO_OUT_SPEED_HIGH :
			CLR_BIT(GPIOx->GPIOx_OSPEEDR,(Config->GPIO_PIN_NUMBER<<1));
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	7812      	ldrb	r2, [r2, #0]
 8000926:	0052      	lsls	r2, r2, #1
 8000928:	2101      	movs	r1, #1
 800092a:	fa01 f202 	lsl.w	r2, r1, r2
 800092e:	43d2      	mvns	r2, r2
 8000930:	401a      	ands	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	609a      	str	r2, [r3, #8]
			SET_BIT(GPIOx->GPIOx_OSPEEDR,((Config->GPIO_PIN_NUMBER<<1)+1));
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	683a      	ldr	r2, [r7, #0]
 800093c:	7812      	ldrb	r2, [r2, #0]
 800093e:	0052      	lsls	r2, r2, #1
 8000940:	3201      	adds	r2, #1
 8000942:	2101      	movs	r1, #1
 8000944:	fa01 f202 	lsl.w	r2, r1, r2
 8000948:	431a      	orrs	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	609a      	str	r2, [r3, #8]
			break;
 800094e:	e017      	b.n	8000980 <MCAL_GPIOx_Init+0x234>
		case GPIO_OUT_SPEED_VERY_HIGH :
			SET_BIT(GPIOx->GPIOx_OSPEEDR,(Config->GPIO_PIN_NUMBER<<1));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	7812      	ldrb	r2, [r2, #0]
 8000958:	0052      	lsls	r2, r2, #1
 800095a:	2101      	movs	r1, #1
 800095c:	fa01 f202 	lsl.w	r2, r1, r2
 8000960:	431a      	orrs	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	609a      	str	r2, [r3, #8]
			SET_BIT(GPIOx->GPIOx_OSPEEDR,((Config->GPIO_PIN_NUMBER<<1)+1));
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	0052      	lsls	r2, r2, #1
 8000970:	3201      	adds	r2, #1
 8000972:	2101      	movs	r1, #1
 8000974:	fa01 f202 	lsl.w	r2, r1, r2
 8000978:	431a      	orrs	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	609a      	str	r2, [r3, #8]
			break;
 800097e:	bf00      	nop

		}
	}
 8000980:	e0f2      	b.n	8000b68 <MCAL_GPIOx_Init+0x41c>
	else if(Config->GPIO_PIN_MODE == AFIO_OUT_OD || Config->GPIO_PIN_MODE == AFIO_OUT_PP || Config->GPIO_PIN_MODE == AFIO_INPUT )
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	785b      	ldrb	r3, [r3, #1]
 8000986:	2b08      	cmp	r3, #8
 8000988:	d008      	beq.n	800099c <MCAL_GPIOx_Init+0x250>
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	785b      	ldrb	r3, [r3, #1]
 800098e:	2b07      	cmp	r3, #7
 8000990:	d004      	beq.n	800099c <MCAL_GPIOx_Init+0x250>
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	785b      	ldrb	r3, [r3, #1]
 8000996:	2b06      	cmp	r3, #6
 8000998:	f040 80e7 	bne.w	8000b6a <MCAL_GPIOx_Init+0x41e>
	{
		CLR_BIT(GPIOx->GPIOx_MODER,( (Config->GPIO_PIN_NUMBER)<<1) );
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	7812      	ldrb	r2, [r2, #0]
 80009a4:	0052      	lsls	r2, r2, #1
 80009a6:	2101      	movs	r1, #1
 80009a8:	fa01 f202 	lsl.w	r2, r1, r2
 80009ac:	43d2      	mvns	r2, r2
 80009ae:	401a      	ands	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	601a      	str	r2, [r3, #0]
		SET_BIT(GPIOx->GPIOx_MODER,( ( (Config->GPIO_PIN_NUMBER) <<1 )+1) );
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	7812      	ldrb	r2, [r2, #0]
 80009bc:	0052      	lsls	r2, r2, #1
 80009be:	3201      	adds	r2, #1
 80009c0:	2101      	movs	r1, #1
 80009c2:	fa01 f202 	lsl.w	r2, r1, r2
 80009c6:	431a      	orrs	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	601a      	str	r2, [r3, #0]
		if(Config->GPIO_PIN_MODE == AFIO_INPUT)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	785b      	ldrb	r3, [r3, #1]
 80009d0:	2b06      	cmp	r3, #6
 80009d2:	d10c      	bne.n	80009ee <MCAL_GPIOx_Init+0x2a2>
		{
			GPIOx->GPIOx_PUPDR &= ~( 3<< ( (Config->GPIO_PIN_NUMBER)<<1 ) );
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	7812      	ldrb	r2, [r2, #0]
 80009dc:	0052      	lsls	r2, r2, #1
 80009de:	2103      	movs	r1, #3
 80009e0:	fa01 f202 	lsl.w	r2, r1, r2
 80009e4:	43d2      	mvns	r2, r2
 80009e6:	401a      	ands	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	e025      	b.n	8000a3a <MCAL_GPIOx_Init+0x2ee>
		}
		else if(Config->GPIO_PIN_MODE == AFIO_OUT_OD || Config->GPIO_PIN_MODE == AFIO_OUT_PP)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	785b      	ldrb	r3, [r3, #1]
 80009f2:	2b08      	cmp	r3, #8
 80009f4:	d003      	beq.n	80009fe <MCAL_GPIOx_Init+0x2b2>
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	785b      	ldrb	r3, [r3, #1]
 80009fa:	2b07      	cmp	r3, #7
 80009fc:	d11d      	bne.n	8000a3a <MCAL_GPIOx_Init+0x2ee>
		{
			switch(Config->GPIO_PIN_MODE)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	785b      	ldrb	r3, [r3, #1]
 8000a02:	2b07      	cmp	r3, #7
 8000a04:	d002      	beq.n	8000a0c <MCAL_GPIOx_Init+0x2c0>
 8000a06:	2b08      	cmp	r3, #8
 8000a08:	d00c      	beq.n	8000a24 <MCAL_GPIOx_Init+0x2d8>
 8000a0a:	e016      	b.n	8000a3a <MCAL_GPIOx_Init+0x2ee>
			{
			case AFIO_OUT_PP :
				CLR_BIT(GPIOx->GPIOx_OTYPER,Config->GPIO_PIN_NUMBER);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	7812      	ldrb	r2, [r2, #0]
 8000a14:	4611      	mov	r1, r2
 8000a16:	2201      	movs	r2, #1
 8000a18:	408a      	lsls	r2, r1
 8000a1a:	43d2      	mvns	r2, r2
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	605a      	str	r2, [r3, #4]
				break ;
 8000a22:	e00a      	b.n	8000a3a <MCAL_GPIOx_Init+0x2ee>
			case AFIO_OUT_OD :
				SET_BIT(GPIOx->GPIOx_OTYPER,Config->GPIO_PIN_NUMBER);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	7812      	ldrb	r2, [r2, #0]
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	2201      	movs	r2, #1
 8000a30:	408a      	lsls	r2, r1
 8000a32:	431a      	orrs	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	605a      	str	r2, [r3, #4]
				break ;
 8000a38:	bf00      	nop
			}
		}

		if(Config->GPIO_PIN_NUMBER <=0 || Config->GPIO_PIN_NUMBER <8)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <MCAL_GPIOx_Init+0x2fe>
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b07      	cmp	r3, #7
 8000a48:	d80d      	bhi.n	8000a66 <MCAL_GPIOx_Init+0x31a>
		{
			GPIOx->GPIOx_AFRL |= (Config->AFIO_SELECT<<(Config->GPIO_PIN_NUMBER<<2));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6a1b      	ldr	r3, [r3, #32]
 8000a4e:	683a      	ldr	r2, [r7, #0]
 8000a50:	7892      	ldrb	r2, [r2, #2]
 8000a52:	4611      	mov	r1, r2
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	7812      	ldrb	r2, [r2, #0]
 8000a58:	0092      	lsls	r2, r2, #2
 8000a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	621a      	str	r2, [r3, #32]
 8000a64:	e00c      	b.n	8000a80 <MCAL_GPIOx_Init+0x334>
		}
		else
		{
			GPIOx->GPIOx_AFRH |= (Config->AFIO_SELECT<<(Config->GPIO_PIN_NUMBER<<2));
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6a:	683a      	ldr	r2, [r7, #0]
 8000a6c:	7892      	ldrb	r2, [r2, #2]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	7812      	ldrb	r2, [r2, #0]
 8000a74:	0092      	lsls	r2, r2, #2
 8000a76:	fa01 f202 	lsl.w	r2, r1, r2
 8000a7a:	431a      	orrs	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
		}
		switch(Config->GPIO_PIN_OUT_SPEED)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	78db      	ldrb	r3, [r3, #3]
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	d870      	bhi.n	8000b6a <MCAL_GPIOx_Init+0x41e>
 8000a88:	a201      	add	r2, pc, #4	; (adr r2, 8000a90 <MCAL_GPIOx_Init+0x344>)
 8000a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8e:	bf00      	nop
 8000a90:	08000aa1 	.word	0x08000aa1
 8000a94:	08000ad5 	.word	0x08000ad5
 8000a98:	08000b07 	.word	0x08000b07
 8000a9c:	08000b39 	.word	0x08000b39
		{

		case GPIO_OUT_SPEED_LOW :
			CLR_BIT(GPIOx->GPIOx_OSPEEDR,(Config->GPIO_PIN_NUMBER<<1));
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	7812      	ldrb	r2, [r2, #0]
 8000aa8:	0052      	lsls	r2, r2, #1
 8000aaa:	2101      	movs	r1, #1
 8000aac:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab0:	43d2      	mvns	r2, r2
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
			CLR_BIT(GPIOx->GPIOx_OSPEEDR,((Config->GPIO_PIN_NUMBER<<1)+1));
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	7812      	ldrb	r2, [r2, #0]
 8000ac0:	0052      	lsls	r2, r2, #1
 8000ac2:	3201      	adds	r2, #1
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aca:	43d2      	mvns	r2, r2
 8000acc:	401a      	ands	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
			break;
 8000ad2:	e04a      	b.n	8000b6a <MCAL_GPIOx_Init+0x41e>
		case GPIO_OUT_SPEED_MEDIUM :
			SET_BIT(GPIOx->GPIOx_OSPEEDR,(Config->GPIO_PIN_NUMBER<<1));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	7812      	ldrb	r2, [r2, #0]
 8000adc:	0052      	lsls	r2, r2, #1
 8000ade:	2101      	movs	r1, #1
 8000ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
			CLR_BIT(GPIOx->GPIOx_OSPEEDR,((Config->GPIO_PIN_NUMBER<<1)+1));
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	683a      	ldr	r2, [r7, #0]
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	0052      	lsls	r2, r2, #1
 8000af4:	3201      	adds	r2, #1
 8000af6:	2101      	movs	r1, #1
 8000af8:	fa01 f202 	lsl.w	r2, r1, r2
 8000afc:	43d2      	mvns	r2, r2
 8000afe:	401a      	ands	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	609a      	str	r2, [r3, #8]
			break;
 8000b04:	e031      	b.n	8000b6a <MCAL_GPIOx_Init+0x41e>
		case GPIO_OUT_SPEED_HIGH :
			CLR_BIT(GPIOx->GPIOx_OSPEEDR,(Config->GPIO_PIN_NUMBER<<1));
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	0052      	lsls	r2, r2, #1
 8000b10:	2101      	movs	r1, #1
 8000b12:	fa01 f202 	lsl.w	r2, r1, r2
 8000b16:	43d2      	mvns	r2, r2
 8000b18:	401a      	ands	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
			SET_BIT(GPIOx->GPIOx_OSPEEDR,((Config->GPIO_PIN_NUMBER<<1)+1));
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	7812      	ldrb	r2, [r2, #0]
 8000b26:	0052      	lsls	r2, r2, #1
 8000b28:	3201      	adds	r2, #1
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b30:	431a      	orrs	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	609a      	str	r2, [r3, #8]
			break;
 8000b36:	e018      	b.n	8000b6a <MCAL_GPIOx_Init+0x41e>
		case GPIO_OUT_SPEED_VERY_HIGH :
			SET_BIT(GPIOx->GPIOx_OSPEEDR,(Config->GPIO_PIN_NUMBER<<1));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	7812      	ldrb	r2, [r2, #0]
 8000b40:	0052      	lsls	r2, r2, #1
 8000b42:	2101      	movs	r1, #1
 8000b44:	fa01 f202 	lsl.w	r2, r1, r2
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
			SET_BIT(GPIOx->GPIOx_OSPEEDR,((Config->GPIO_PIN_NUMBER<<1)+1));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	0052      	lsls	r2, r2, #1
 8000b58:	3201      	adds	r2, #1
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b60:	431a      	orrs	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	609a      	str	r2, [r3, #8]
			break;
 8000b66:	e000      	b.n	8000b6a <MCAL_GPIOx_Init+0x41e>
	}
 8000b68:	bf00      	nop

		}
	}

}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <MCAL_GPIOx_Pin_Write>:
 * @param [out] 	: none
 * @retval 		: none
 * Note			: remember that according to our UQFN48 package we only have ports : A-B-C
 *===================================================================*/
void MCAL_GPIOx_Pin_Write(GPIOx_Registers_t *GPIOx , uint8_t Pin_Number , uint8_t value)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
 8000b84:	4613      	mov	r3, r2
 8000b86:	70bb      	strb	r3, [r7, #2]

	if(value == PIN_HIGH)
 8000b88:	78bb      	ldrb	r3, [r7, #2]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d109      	bne.n	8000ba2 <MCAL_GPIOx_Pin_Write+0x2a>
	{
		SET_BIT(GPIOx->GPIOx_ODR , Pin_Number );
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	78fa      	ldrb	r2, [r7, #3]
 8000b94:	2101      	movs	r1, #1
 8000b96:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	615a      	str	r2, [r3, #20]
	}
	else if(value == PIN_LOW)
	{
		CLR_BIT(GPIOx->GPIOx_ODR , Pin_Number );
	}
}
 8000ba0:	e00c      	b.n	8000bbc <MCAL_GPIOx_Pin_Write+0x44>
	else if(value == PIN_LOW)
 8000ba2:	78bb      	ldrb	r3, [r7, #2]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d109      	bne.n	8000bbc <MCAL_GPIOx_Pin_Write+0x44>
		CLR_BIT(GPIOx->GPIOx_ODR , Pin_Number );
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	78fa      	ldrb	r2, [r7, #3]
 8000bae:	2101      	movs	r1, #1
 8000bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb4:	43d2      	mvns	r2, r2
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	615a      	str	r2, [r3, #20]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <MCAL_GPIOx_Pin_Read>:
 * @param [out] 	: pin_value
 * @retval 		: @ref:PIN_VALUE
 * Note			: remember that according to our UQFN48 package we only have ports : A-B-C
 *===================================================================*/
uint8_t MCAL_GPIOx_Pin_Read(GPIOx_Registers_t *GPIOx , uint8_t Pin_Number)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]
	if(GET_BIT(GPIOx->GPIOx_IDR,Pin_Number)==1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	78fa      	ldrb	r2, [r7, #3]
 8000bda:	2101      	movs	r1, #1
 8000bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000be0:	401a      	ands	r2, r3
 8000be2:	78fb      	ldrb	r3, [r7, #3]
 8000be4:	fa22 f303 	lsr.w	r3, r2, r3
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d101      	bne.n	8000bf0 <MCAL_GPIOx_Pin_Read+0x28>
		return PIN_HIGH ;
 8000bec:	2301      	movs	r3, #1
 8000bee:	e000      	b.n	8000bf2 <MCAL_GPIOx_Pin_Read+0x2a>
	else
		return PIN_LOW ;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <MCAL_RCC_voidInit>:
 * @param [out] 	: void
 * @retval 		: none
 * Note			: this function has no prerequisites
 *===================================================================*/
void MCAL_RCC_voidInit(RCC_Config_t *config)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	uint8_t	SYS_CLK_MODE ;
	SYS_CLK_MODE = config->RCC_SYS_CLK ;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	73fb      	strb	r3, [r7, #15]
	if(SYS_CLK_MODE==HSI)
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d119      	bne.n	8000c48 <MCAL_RCC_voidInit+0x48>
	{
		SET_BIT(RCC->RCC_CR,HSION); // Enable HSI
 8000c14:	4b53      	ldr	r3, [pc, #332]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a52      	ldr	r2, [pc, #328]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6013      	str	r3, [r2, #0]
		while(GET_BIT(RCC->RCC_CR,HSIRDY)==0); // Wait until HSI become stable
 8000c20:	bf00      	nop
 8000c22:	4b50      	ldr	r3, [pc, #320]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f9      	beq.n	8000c22 <MCAL_RCC_voidInit+0x22>
		CLR_BIT(RCC->RCC_CFGR,SW0);//Select HSI
 8000c2e:	4b4d      	ldr	r3, [pc, #308]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	4a4c      	ldr	r2, [pc, #304]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000c34:	f023 0301 	bic.w	r3, r3, #1
 8000c38:	6093      	str	r3, [r2, #8]
		CLR_BIT(RCC->RCC_CFGR,SW1);
 8000c3a:	4b4a      	ldr	r3, [pc, #296]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	4a49      	ldr	r2, [pc, #292]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000c40:	f023 0302 	bic.w	r3, r3, #2
 8000c44:	6093      	str	r3, [r2, #8]
	else {
		//nothing
	}


}
 8000c46:	e087      	b.n	8000d58 <MCAL_RCC_voidInit+0x158>
	else if(SYS_CLK_MODE==HSE)
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d12f      	bne.n	8000cae <MCAL_RCC_voidInit+0xae>
		HSE_Mode = config->RCC_HSE_MODE ;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	785b      	ldrb	r3, [r3, #1]
 8000c52:	73bb      	strb	r3, [r7, #14]
		if(HSE_Mode==HSE_MODE_RC)
 8000c54:	7bbb      	ldrb	r3, [r7, #14]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d106      	bne.n	8000c68 <MCAL_RCC_voidInit+0x68>
			CLR_BIT(RCC->RCC_CR,HSEBYP); // select RC mode
 8000c5a:	4b42      	ldr	r3, [pc, #264]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a41      	ldr	r2, [pc, #260]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e008      	b.n	8000c7a <MCAL_RCC_voidInit+0x7a>
		else if(HSE_Mode==HSE_MODE_BYPASS)
 8000c68:	7bbb      	ldrb	r3, [r7, #14]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d105      	bne.n	8000c7a <MCAL_RCC_voidInit+0x7a>
			SET_BIT(RCC->RCC_CR,HSEBYP); // select bypath mode
 8000c6e:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a3c      	ldr	r2, [pc, #240]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c78:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->RCC_CR,HSEON); // ENABLE HSE
 8000c7a:	4b3a      	ldr	r3, [pc, #232]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a39      	ldr	r2, [pc, #228]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c84:	6013      	str	r3, [r2, #0]
		while(GET_BIT(RCC->RCC_CR,HSERDY)==0);//Wait until the HSE become Stable
 8000c86:	bf00      	nop
 8000c88:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d0f9      	beq.n	8000c88 <MCAL_RCC_voidInit+0x88>
		SET_BIT(RCC->RCC_CFGR,SW0);//Select HSE oscillator
 8000c94:	4b33      	ldr	r3, [pc, #204]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	4a32      	ldr	r2, [pc, #200]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6093      	str	r3, [r2, #8]
		CLR_BIT(RCC->RCC_CFGR,SW1);
 8000ca0:	4b30      	ldr	r3, [pc, #192]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	4a2f      	ldr	r2, [pc, #188]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000ca6:	f023 0302 	bic.w	r3, r3, #2
 8000caa:	6093      	str	r3, [r2, #8]
}
 8000cac:	e054      	b.n	8000d58 <MCAL_RCC_voidInit+0x158>
	else if(SYS_CLK_MODE==PLL)
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d130      	bne.n	8000d16 <MCAL_RCC_voidInit+0x116>
		RCC->RCC_PLLCFGR |= config->RCC_PLL_IN_DIV_FACTOR ;
 8000cb4:	4b2b      	ldr	r3, [pc, #172]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	7912      	ldrb	r2, [r2, #4]
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4a29      	ldr	r2, [pc, #164]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000cc0:	430b      	orrs	r3, r1
 8000cc2:	6053      	str	r3, [r2, #4]
		RCC->RCC_PLLCFGR |= (config->RCC_PLL_MUL_FACTOR_VCO)<<6 ;
 8000cc4:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	88d2      	ldrh	r2, [r2, #6]
 8000ccc:	0192      	lsls	r2, r2, #6
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4a24      	ldr	r2, [pc, #144]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000cd2:	430b      	orrs	r3, r1
 8000cd4:	6053      	str	r3, [r2, #4]
		RCC->RCC_PLLCFGR |= (config->RCC_PLL_OUT_DIV_FACTOR)<<16;
 8000cd6:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	7952      	ldrb	r2, [r2, #5]
 8000cde:	0412      	lsls	r2, r2, #16
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4a20      	ldr	r2, [pc, #128]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000ce4:	430b      	orrs	r3, r1
 8000ce6:	6053      	str	r3, [r2, #4]
		RCC->RCC_PLLCFGR |= (config->RCC_PLL_SRC)<<22;
 8000ce8:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	7a12      	ldrb	r2, [r2, #8]
 8000cf0:	0592      	lsls	r2, r2, #22
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000cf6:	430b      	orrs	r3, r1
 8000cf8:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->RCC_CR,PLLON);
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000d00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d04:	6013      	str	r3, [r2, #0]
		while(GET_BIT(RCC->RCC_CR,PLLRDY)==0);//Wait until Main PLL become Stable
 8000d06:	bf00      	nop
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0f9      	beq.n	8000d08 <MCAL_RCC_voidInit+0x108>
}
 8000d14:	e020      	b.n	8000d58 <MCAL_RCC_voidInit+0x158>
	else if(SYS_CLK_MODE==PLLI2S)
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d11d      	bne.n	8000d58 <MCAL_RCC_voidInit+0x158>
		RCC->RCC_PLLCFGR |= config->RCC_PLL_IN_DIV_FACTOR ;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	7912      	ldrb	r2, [r2, #4]
 8000d24:	4611      	mov	r1, r2
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000d28:	430b      	orrs	r3, r1
 8000d2a:	6053      	str	r3, [r2, #4]
		RCC->RCC_PLLCFGR |= (config->RCC_PLL_SRC)<<22;
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	7a12      	ldrb	r2, [r2, #8]
 8000d34:	0592      	lsls	r2, r2, #22
 8000d36:	4611      	mov	r1, r2
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000d3a:	430b      	orrs	r3, r1
 8000d3c:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->RCC_CR,PLLI2SON);
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000d44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d48:	6013      	str	r3, [r2, #0]
		while(GET_BIT(RCC->RCC_CR,PLLI2SRDY)==0);//Wait until I2S PLL become Stable
 8000d4a:	bf00      	nop
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <MCAL_RCC_voidInit+0x164>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d0f9      	beq.n	8000d4c <MCAL_RCC_voidInit+0x14c>
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	40023800 	.word	0x40023800

08000d68 <MCAL_RCC_voidPeripheral_EN>:
 * @param [out] 	: void
 * @retval 		: none
 * Note			: the RCC peripheral must be initialized firist
 *===================================================================*/
void MCAL_RCC_voidPeripheral_EN(uint8_t Peripheral , uint8_t Bus)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	460a      	mov	r2, r1
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	4613      	mov	r3, r2
 8000d76:	71bb      	strb	r3, [r7, #6]
	switch(Bus)
 8000d78:	79bb      	ldrb	r3, [r7, #6]
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d836      	bhi.n	8000dec <MCAL_RCC_voidPeripheral_EN+0x84>
 8000d7e:	a201      	add	r2, pc, #4	; (adr r2, 8000d84 <MCAL_RCC_voidPeripheral_EN+0x1c>)
 8000d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d84:	08000d95 	.word	0x08000d95
 8000d88:	08000dab 	.word	0x08000dab
 8000d8c:	08000dc1 	.word	0x08000dc1
 8000d90:	08000dd7 	.word	0x08000dd7
	{

	case AHB1_BUS : SET_BIT(RCC->RCC_AHB1ENR, Peripheral);
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <MCAL_RCC_voidPeripheral_EN+0x90>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	79fa      	ldrb	r2, [r7, #7]
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000da0:	4611      	mov	r1, r2
 8000da2:	4a15      	ldr	r2, [pc, #84]	; (8000df8 <MCAL_RCC_voidPeripheral_EN+0x90>)
 8000da4:	430b      	orrs	r3, r1
 8000da6:	6313      	str	r3, [r2, #48]	; 0x30
	break ;
 8000da8:	e020      	b.n	8000dec <MCAL_RCC_voidPeripheral_EN+0x84>
	case AHB2_BUS : SET_BIT(RCC->RCC_AHB2ENR, Peripheral);
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <MCAL_RCC_voidPeripheral_EN+0x90>)
 8000dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dae:	79fa      	ldrb	r2, [r7, #7]
 8000db0:	2101      	movs	r1, #1
 8000db2:	fa01 f202 	lsl.w	r2, r1, r2
 8000db6:	4611      	mov	r1, r2
 8000db8:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <MCAL_RCC_voidPeripheral_EN+0x90>)
 8000dba:	430b      	orrs	r3, r1
 8000dbc:	6353      	str	r3, [r2, #52]	; 0x34
	break ;
 8000dbe:	e015      	b.n	8000dec <MCAL_RCC_voidPeripheral_EN+0x84>
	case APB1_BUS : SET_BIT(RCC->RCC_APB1ENR, Peripheral);
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <MCAL_RCC_voidPeripheral_EN+0x90>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	79fa      	ldrb	r2, [r7, #7]
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <MCAL_RCC_voidPeripheral_EN+0x90>)
 8000dd0:	430b      	orrs	r3, r1
 8000dd2:	6413      	str	r3, [r2, #64]	; 0x40
	break ;
 8000dd4:	e00a      	b.n	8000dec <MCAL_RCC_voidPeripheral_EN+0x84>
	case APB2_BUS : SET_BIT(RCC->RCC_APB2ENR, Peripheral);
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MCAL_RCC_voidPeripheral_EN+0x90>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	79fa      	ldrb	r2, [r7, #7]
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fa01 f202 	lsl.w	r2, r1, r2
 8000de2:	4611      	mov	r1, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <MCAL_RCC_voidPeripheral_EN+0x90>)
 8000de6:	430b      	orrs	r3, r1
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
	break ;
 8000dea:	bf00      	nop
	}
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	40023800 	.word	0x40023800

08000dfc <MCAL_SYSTK_voidInit>:
/****************************Global Variables*****************************/
static void (*GlobalcallBackPtr)(void) = NULL ;

/******************************APIs Implementation************************/
void MCAL_SYSTK_voidInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
#if	STK_CLK_SOURCE==STK_CLK_SOURCE_AHB
	SET_BIT(STK->STK_CTRL,CLKSOURCE);
#elif  STK_CLK_SOURCE==STK_CLK_SOURCE_AHB_DIV_8
	CLR_BIT(STK->STK_CTRL,CLKSOURCE);
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <MCAL_SYSTK_voidInit+0x28>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <MCAL_SYSTK_voidInit+0x28>)
 8000e06:	f023 0304 	bic.w	r3, r3, #4
 8000e0a:	6013      	str	r3, [r2, #0]
#endif

#if	STK_INT_SOURCE==STK_INT_SOURCE_ENABLE
	SET_BIT(STK->STK_CTRL,TICKINT);
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <MCAL_SYSTK_voidInit+0x28>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <MCAL_SYSTK_voidInit+0x28>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	6013      	str	r3, [r2, #0]
#elif  STK_INT_SOURCE==STK_INT_SOURCE_DISABLE
	CLR_BIT(STK->STK_CTRL,TICKINT);

#endif
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <SysTick_Handler>:
		SET_BIT(STK->STK_CTRL, ENABLE);
}

/***********************IRQ Handler***********************/
void SysTick_Handler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	if(GlobalcallBackPtr != NULL)
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <SysTick_Handler+0x18>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d002      	beq.n	8000e3a <SysTick_Handler+0x12>
	{
		GlobalcallBackPtr();
 8000e34:	4b02      	ldr	r3, [pc, #8]	; (8000e40 <SysTick_Handler+0x18>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4798      	blx	r3
	}

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000058 	.word	0x20000058

08000e44 <main>:
void TASK4(void)
{
	MCAL_GPIOx_Pin_Toggle(GPIOA, GPIO_PIN_3);
}
int main()
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
	/******************SYSTK Enable**************************/
	 MCAL_SYSTK_voidInit();
 8000e4a:	f7ff ffd7 	bl	8000dfc <MCAL_SYSTK_voidInit>
	 /*******************************************************/
	RCC_Config_t MyRCC ;
	MyRCC.RCC_SYS_CLK 	 =  HSI;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	713b      	strb	r3, [r7, #4]
	MyRCC.RCC_PERIPHERAL = GPIOA_PERIPHERAL ;
 8000e52:	2300      	movs	r3, #0
 8000e54:	71bb      	strb	r3, [r7, #6]
	//MyRCC.RCC_HSE_MODE = HSE_MODE_BYPASS ;
	MyRCC.RCC_BUS_SELECT = AHB1_BUS  ;
 8000e56:	2300      	movs	r3, #0
 8000e58:	71fb      	strb	r3, [r7, #7]
	MCAL_RCC_voidInit(&MyRCC);
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fecf 	bl	8000c00 <MCAL_RCC_voidInit>
	MCAL_RCC_voidPeripheral_EN(MyRCC.RCC_PERIPHERAL,MyRCC.RCC_BUS_SELECT );
 8000e62:	79bb      	ldrb	r3, [r7, #6]
 8000e64:	79fa      	ldrb	r2, [r7, #7]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff7d 	bl	8000d68 <MCAL_RCC_voidPeripheral_EN>
	MyRCC.RCC_PERIPHERAL = GPIOB_PERIPHERAL ;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	71bb      	strb	r3, [r7, #6]
	MyRCC.RCC_BUS_SELECT = AHB1_BUS  ;
 8000e72:	2300      	movs	r3, #0
 8000e74:	71fb      	strb	r3, [r7, #7]
	MCAL_RCC_voidPeripheral_EN(MyRCC.RCC_PERIPHERAL,MyRCC.RCC_BUS_SELECT );
 8000e76:	79bb      	ldrb	r3, [r7, #6]
 8000e78:	79fa      	ldrb	r2, [r7, #7]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff73 	bl	8000d68 <MCAL_RCC_voidPeripheral_EN>
	GPIOx_Config_t MyGPIO	;

	/*******************Output****************/

	/****************LED1*********************/
	MyGPIO.GPIO_PIN_MODE = GPIO_OUT_PP;
 8000e82:	2304      	movs	r3, #4
 8000e84:	707b      	strb	r3, [r7, #1]
	MyGPIO.GPIO_PIN_NUMBER = GPIO_PIN_0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	703b      	strb	r3, [r7, #0]
	MyGPIO.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_LOW ;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIOx_Init(GPIOA ,&MyGPIO);
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	481a      	ldr	r0, [pc, #104]	; (8000efc <main+0xb8>)
 8000e94:	f7ff fc5a 	bl	800074c <MCAL_GPIOx_Init>
	/****************LED2*********************/
	MyGPIO.GPIO_PIN_MODE = GPIO_OUT_PP;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	707b      	strb	r3, [r7, #1]
	MyGPIO.GPIO_PIN_NUMBER = GPIO_PIN_1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	703b      	strb	r3, [r7, #0]
	MyGPIO.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_LOW ;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIOx_Init(GPIOA ,&MyGPIO);
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4814      	ldr	r0, [pc, #80]	; (8000efc <main+0xb8>)
 8000eaa:	f7ff fc4f 	bl	800074c <MCAL_GPIOx_Init>
	/****************LED3*********************/
	MyGPIO.GPIO_PIN_MODE = GPIO_OUT_PP;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	707b      	strb	r3, [r7, #1]
	MyGPIO.GPIO_PIN_NUMBER = GPIO_PIN_2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	703b      	strb	r3, [r7, #0]
	MyGPIO.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_LOW ;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIOx_Init(GPIOA ,&MyGPIO);
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480f      	ldr	r0, [pc, #60]	; (8000efc <main+0xb8>)
 8000ec0:	f7ff fc44 	bl	800074c <MCAL_GPIOx_Init>
	/****************LED4*********************/
	MyGPIO.GPIO_PIN_MODE = GPIO_OUT_PP;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	707b      	strb	r3, [r7, #1]
	MyGPIO.GPIO_PIN_NUMBER = GPIO_PIN_3;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	703b      	strb	r3, [r7, #0]
	MyGPIO.GPIO_PIN_OUT_SPEED = GPIO_OUT_SPEED_LOW ;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIOx_Init(GPIOA ,&MyGPIO);
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4809      	ldr	r0, [pc, #36]	; (8000efc <main+0xb8>)
 8000ed6:	f7ff fc39 	bl	800074c <MCAL_GPIOx_Init>
	MyEXTI.CallBack = MyISR ;
	MCAL_EXTI_Enable(&MyEXTI);
	***************************************
	MCAL_NVIC_EnIRQ(EXTI0);
	****************************************/
	HAL_LCD_Init();
 8000eda:	f7ff fb03 	bl	80004e4 <HAL_LCD_Init>
	HAL_KEYPAD_Init();
 8000ede:	f7ff f979 	bl	80001d4 <HAL_KEYPAD_Init>
	while (1)
	{
		while(HAL_KEYPAD_Get_PressedKey() == KEY_NOT_PRESSED);
 8000ee2:	bf00      	nop
 8000ee4:	f7ff f9d8 	bl	8000298 <HAL_KEYPAD_Get_PressedKey>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2bff      	cmp	r3, #255	; 0xff
 8000eec:	d0fa      	beq.n	8000ee4 <main+0xa0>
		HAL_LCD_Display_Number(HAL_KEYPAD_Get_PressedKey());
 8000eee:	f7ff f9d3 	bl	8000298 <HAL_KEYPAD_Get_PressedKey>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fbf2 	bl	80006de <HAL_LCD_Display_Number>
		while(HAL_KEYPAD_Get_PressedKey() == KEY_NOT_PRESSED);
 8000efa:	e7f2      	b.n	8000ee2 <main+0x9e>
 8000efc:	40020000 	.word	0x40020000

08000f00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f02:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f04:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f0a:	490d      	ldr	r1, [pc, #52]	; (8000f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <LoopForever+0xe>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f20:	4c0a      	ldr	r4, [pc, #40]	; (8000f4c <LoopForever+0x16>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f2e:	f000 f811 	bl	8000f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f32:	f7ff ff87 	bl	8000e44 <main>

08000f36 <LoopForever>:

LoopForever:
    b LoopForever
 8000f36:	e7fe      	b.n	8000f36 <LoopForever>
  ldr   r0, =_estack
 8000f38:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f44:	08000fcc 	.word	0x08000fcc
  ldr r2, =_sbss
 8000f48:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f4c:	2000005c 	.word	0x2000005c

08000f50 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>
	...

08000f54 <__libc_init_array>:
 8000f54:	b570      	push	{r4, r5, r6, lr}
 8000f56:	4e0d      	ldr	r6, [pc, #52]	; (8000f8c <__libc_init_array+0x38>)
 8000f58:	4c0d      	ldr	r4, [pc, #52]	; (8000f90 <__libc_init_array+0x3c>)
 8000f5a:	1ba4      	subs	r4, r4, r6
 8000f5c:	10a4      	asrs	r4, r4, #2
 8000f5e:	2500      	movs	r5, #0
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	d109      	bne.n	8000f78 <__libc_init_array+0x24>
 8000f64:	4e0b      	ldr	r6, [pc, #44]	; (8000f94 <__libc_init_array+0x40>)
 8000f66:	4c0c      	ldr	r4, [pc, #48]	; (8000f98 <__libc_init_array+0x44>)
 8000f68:	f000 f818 	bl	8000f9c <_init>
 8000f6c:	1ba4      	subs	r4, r4, r6
 8000f6e:	10a4      	asrs	r4, r4, #2
 8000f70:	2500      	movs	r5, #0
 8000f72:	42a5      	cmp	r5, r4
 8000f74:	d105      	bne.n	8000f82 <__libc_init_array+0x2e>
 8000f76:	bd70      	pop	{r4, r5, r6, pc}
 8000f78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f7c:	4798      	blx	r3
 8000f7e:	3501      	adds	r5, #1
 8000f80:	e7ee      	b.n	8000f60 <__libc_init_array+0xc>
 8000f82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f86:	4798      	blx	r3
 8000f88:	3501      	adds	r5, #1
 8000f8a:	e7f2      	b.n	8000f72 <__libc_init_array+0x1e>
 8000f8c:	08000fc4 	.word	0x08000fc4
 8000f90:	08000fc4 	.word	0x08000fc4
 8000f94:	08000fc4 	.word	0x08000fc4
 8000f98:	08000fc8 	.word	0x08000fc8

08000f9c <_init>:
 8000f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9e:	bf00      	nop
 8000fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fa2:	bc08      	pop	{r3}
 8000fa4:	469e      	mov	lr, r3
 8000fa6:	4770      	bx	lr

08000fa8 <_fini>:
 8000fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000faa:	bf00      	nop
 8000fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fae:	bc08      	pop	{r3}
 8000fb0:	469e      	mov	lr, r3
 8000fb2:	4770      	bx	lr
